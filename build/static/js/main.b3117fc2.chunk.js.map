{"version":3,"sources":["components/PlayerConfig/PlayerConfig.tsx","components/Round/Round.tsx","components/Summary/Summary.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PlayerConfig","props","handleAddPlayer","e","preventDefault","state","newPlayerName","addPlayerFn","setState","handleRemovePlayer","name","removePlayerFn","handleNameChange","target","value","renderPlayerList","players","length","map","player","key","className","onClick","this","onSubmit","type","placeholder","onChange","React","Component","Round","areBetsValid","betTotal","playerRounds","p","bet","cardCount","renderCol","round","over","handleBetChange","handleWinChange","points","renderCols","renderError","playerName","idx","forEach","index","playerIndex","getPlayerIndex","newVal","parseInt","newState","betBonus","endRoundFn","handleRoundEnd","nodes","rounds","calcPoints","push","App","addPlayer","newPLayerList","removePlayer","indexOf","newPlayerList","splice","endRound","newRounds","generateRound","handleBetBonusChange","handleStartGame","firstRound","renderHeaders","gameStarted","renderRounds","Summary","renderConfigOrGame","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b3117fc2.chunk.js","sourcesContent":["import React from 'react';\n\ninterface IPlayerConfigProps {\n  players: Array<string>;\n  addPlayerFn: Function;\n  removePlayerFn: Function;\n};\ninterface IPlayerConfigState {\n  newPlayerName: string;\n}\n\nclass PlayerConfig extends React.Component<IPlayerConfigProps, IPlayerConfigState> {\n  constructor(props: IPlayerConfigProps) {\n    super(props);\n    this.state = { newPlayerName:'' };\n  }\n\n  handleAddPlayer = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (this.state.newPlayerName && this.state.newPlayerName !== '') {\n      this.props.addPlayerFn(this.state.newPlayerName);\n      this.setState({newPlayerName: ''});\n    }\n  }\n\n  handleRemovePlayer = (name: string) => {\n    this.props.removePlayerFn(name);\n  }\n\n  handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({newPlayerName: e.target.value});\n  }\n\n  renderPlayerList = (players: Array<string>) => {\n    if (players && players.length) {\n      return players.map((player: any) => (\n        <li key={player}>\n          <span className=\"player-name\">{player}</span>\n          <span className=\"player-delete\" onClick={() => this.handleRemovePlayer(player)}>remove</span>\n        </li>)\n      );\n    }\n    return <li>No players yet. Add one to get started.</li>\n  }\n\n  render() {\n    return (\n      <div className=\"player-config\">\n        <ul className=\"current-players\">\n          <h3>Players:</h3>\n          { this.renderPlayerList(this.props.players) }\n        </ul>\n        <div className=\"add-player-form\">\n          <form onSubmit={this.handleAddPlayer}>\n            <input type=\"text\" placeholder=\"Name...\" value={this.state.newPlayerName} onChange={this.handleNameChange} />\n            <button onClick={this.handleAddPlayer}>Add Player</button>\n          </form>\n        </div>\n      </div>\n      );\n  }\n}\n\nexport default PlayerConfig;\n","import React from 'react';\nimport {IRound, IPlayerRound} from '../../App';\n\ninterface IRoundProps {\n  cardCount: number;\n  betBonus: number;\n  round: IRound;\n  endRoundFn: Function;\n};\ninterface IRoundState {\n  playerRounds: Array<IPlayerRound>;\n}\n\nclass Round extends React.Component<IRoundProps, IRoundState> {\n  constructor(props: IRoundProps) {\n    super(props);\n    this.state = { playerRounds: props.round.players };\n  }\n\n  getPlayerIndex(playerName: string): number {\n    let idx = -1;\n    this.state.playerRounds.forEach((player, index) => {\n      if (player.player === playerName) {idx = index;}\n    });\n    return idx;\n  }\n\n  areBetsValid = () => {\n    let betTotal = 0;\n    for (let p of this.state.playerRounds) {\n      if (p.bet) { betTotal = betTotal + p.bet; }\n    }\n    if (betTotal === this.props.cardCount) {\n      return false;\n    }\n    return true;\n  }\n\n  handleBetChange(playerName: string, e:React.ChangeEvent<HTMLInputElement>) {\n    const playerIndex = this.getPlayerIndex(playerName);\n    const player = this.state.playerRounds[playerIndex];\n    const newVal = parseInt(e.target.value, 10);\n    player.bet = newVal;\n\n    const newState = [...this.state.playerRounds];\n    newState[playerIndex] = player;\n    this.setState({playerRounds: newState});\n  }\n\n  handleWinChange(playerName: string, e:React.ChangeEvent<HTMLInputElement>) {\n    const playerIndex = this.getPlayerIndex(playerName);\n    const player = this.state.playerRounds[playerIndex];\n    const newVal = parseInt(e.target.value, 10);\n    let points = newVal;\n    if (newVal === player.bet) { points = points + this.props.betBonus };\n    player.points = points;\n\n    const newState = [...this.state.playerRounds];\n    newState[playerIndex] = player;\n    this.setState({playerRounds: newState});\n  }\n\n  handleRoundEnd() {\n    this.props.endRoundFn();\n  }\n\n  renderCol = (player: IPlayerRound) => {\n    return (\n      <table className={\"game-table-col\" + (this.props.round.over ? ' over' : ' in-progress')}>\n        <thead>\n          <tr>\n            <td>Bet</td>\n            <td>Won</td>\n            <td>Points</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td><input type=\"text\" onChange={(e) => this.handleBetChange(player.player, e)} /></td>\n            <td><input type=\"text\" onChange={(e) => this.handleWinChange(player.player, e)} /></td>\n            <td>{player.points}</td>\n          </tr>\n        </tbody>\n      </table>\n    );\n  }\n\n  renderCols = () => {\n    return this.props.round.players.map(player => <td key={player.player}>{this.renderCol(player)}</td>);\n  }\n\n  renderError = () => {\n    if (!this.areBetsValid()) {\n      return (<span className=\"error\">Bets cannot equal # of cards in a round. Last person to bet needs to change.</span>);\n    }\n  }\n\n  render() {\n    return (\n        <tr>\n          <td>{this.props.cardCount}</td>\n          {this.renderCols()}\n          <td>\n            <button className={'end-round-button' + (this.props.round.over ? ' over' : ' in-progress')} onClick={() => this.handleRoundEnd()}>End Round</button>\n            { this.renderError() }\n          </td>\n        </tr>\n    );\n  }\n}\n\nexport default Round;\n","import React from 'react';\nimport {IRound} from '../../App';\n\ninterface ISummaryProps {\n  rounds: Array<IRound>;\n}\ninterface Obj {\n  [key: string]: number;\n} \n\nconst calcPoints = (rounds: Array<IRound>) => {\n  let points: Obj = {};\n\n  for(let round of rounds) {\n    round.players.forEach(player => {\n      if (points[player.player]) {\n        points[player.player] = points[player.player] + player.points;\n      } else {\n        points[player.player] = player.points;\n      } \n    })\n  }\n  return points;\n}\n\nexport default (props: ISummaryProps) => {\n  const nodes: Array<JSX.Element> = [];\n  const points = calcPoints(props.rounds);\n  for(let player in points) {\n    nodes.push(<td key={player}>{player}: {points[player]}</td>);\n  }\n  return <table className=\"summary\"><tbody>{nodes}</tbody></table>;\n}\n\n","import React from 'react';\n\nimport PlayerConfig from './components/PlayerConfig/PlayerConfig';\nimport Round from './components/Round/Round';\nimport Summary from './components/Summary/Summary';\n\ninterface IAppProps {}\ninterface IAppState {\n  players: Array<string>;\n  betBonus: number;\n  rounds: Array<IRound>;\n}\n\nexport interface IPlayerRound {\n  player: string;\n  bet?: number;\n  won?: number;\n  points: number;\n}\nexport interface IRound {\n  over?: boolean;\n  players: Array<IPlayerRound>\n}\n\nexport class App extends React.Component<IAppProps, IAppState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      betBonus: 10,\n      players: [],\n      rounds: []\n    }\n  }\n\n  addPlayer = (name: string) => {\n    const newPLayerList: Array<string> = [...this.state.players];\n    newPLayerList.push(name);\n    this.setState({players: newPLayerList});\n  }\n\n  removePlayer = (name: string) => {\n    const index = this.state.players.indexOf(name);\n    let newPlayerList: Array<string> = [...this.state.players];\n    if (index > -1) {\n      newPlayerList.splice(index, 1);\n    }\n    this.setState({players: newPlayerList});\n  }\n\n  gameStarted(): Boolean {\n    return this.state.rounds.length !== 0;\n  }\n\n  endRound = () => {\n    const newRounds = [...this.state.rounds];\n    newRounds[this.state.rounds.length - 1].over = true;\n    newRounds.push(this.generateRound());\n    this.setState({rounds: newRounds})\n  }\n\n  generateRound(): IRound {\n    const newRoundPlayers: Array<IPlayerRound> = this.state.players.map(player => {\n      return {\n        player: player,\n        points: 0\n      }\n    });\n    const newRound: IRound = {\n      over: false,\n      players: newRoundPlayers\n    };\n    return newRound\n  }\n\n  handleBetBonusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({betBonus: parseInt(e.target.value, 10)});\n  }\n\n  handleStartGame = () => {\n    const firstRound = this.generateRound();\n    this.setState({rounds: [firstRound]});\n  }\n\n  renderHeaders = () => {\n    return this.state.players.map(player => <td key={player}>{player}</td>);\n  }\n\n  renderConfigOrGame() {\n    if (!this.gameStarted()) {\n      return (\n        <div className=\"game-config\">\n          <h1>Oh Hell!</h1>\n          <PlayerConfig players={this.state.players} addPlayerFn={this.addPlayer} removePlayerFn={this.removePlayer}></PlayerConfig>\n          <h3>Options:</h3>\n          <label>Bet Bonus:</label>\n          <input type=\"text\" value={this.state.betBonus} onChange={this.handleBetBonusChange} />\n          <button onClick={this.handleStartGame} className=\"start-game-button\">Start Game</button>\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"game-in-progress\">\n          <table className=\"game-table\">\n            <thead>\n              <tr>\n                <td># Cards</td>\n                {this.renderHeaders()}\n              </tr>\n            </thead>\n            <tbody>{this.renderRounds()}</tbody>\n            </table>\n          <Summary rounds={this.state.rounds} />\n        </div>\n      )\n    }\n  }\n\n  renderRounds() {\n    return this.state.rounds.map((round, index) => <Round key={index} round={round} cardCount={index + 3} betBonus={this.state.betBonus} endRoundFn={this.endRound} />)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        { this.renderConfigOrGame() }\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}